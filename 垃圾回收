一常用的垃圾收集算法
1.1标记-清除算法（Mark-Sweep）
	标记-清除算法采用根集合(GC Roots)进行扫描，对存活的对象进行标记，标记完毕后，再扫描整个空间中未被标记的对象，进行回收。标记-清除算法不需要进行对象的移动，只需对不存活的对象进行处理，再存活对象比较多的情况下极为高效，但由于标记-清除算法直接回收不存活的对象，因此会造成内存碎片。
 1.2复制算法(Copying)
	复制算法的提出是为了克服句柄的开销和解决内存碎片的问题。它开始时把堆分成一个对象，面和多个空闲面，程序为对象面为对象分配空间，当对象满了，基于copying算法的垃圾，收集就从根集合(GC Roots)中扫描活动对象，并向每个活动对象复制到空闲面(使得活动对象所占的内存没有空闲洞)，这样空闲面变成了对象面，原来的对象面变成了空闲面，程序会在新的对象面分配内存
 
1.3标记-整理算法(Mark-compact)
	标记-整理算法采用标记-清除算法一样的方式进行对象的标记，但在清除时不同，在回收不存活的对象占用的空间后，会将所有的存活对象往左端空间移动，并更新相应的指针。标记-整理算法是在标记-清除算法的基础上，又进行对象的移动，因此成本更高，但是却解决了内存碎片的问题，具体流程
 
1.4分代收集算法
	分代收集算法是目前大部分JVM的垃圾收集器采用的算法，它的核心算法是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代和新生代。在堆区之外还有一个代是永久代。老年代特点是每次垃圾收集只有少量对象被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。
